<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on xlxing</title>
    <link>http://xlxing.github.io/post/</link>
    <description>Recent content in Posts on xlxing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 Dec 2018 11:52:05 +0800</lastBuildDate>
    
	<atom:link href="http://xlxing.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raft算法详解</title>
      <link>http://xlxing.github.io/post/raft%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 03 Dec 2018 11:52:05 +0800</pubDate>
      
      <guid>http://xlxing.github.io/post/raft%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>名词解释： 非拜占庭：把出现故障但不会伪造信息的错误称为非拜占庭。 拜占庭：把伪造信息恶意响应的情况称为拜占庭。 Raft算法 1.什么是分布式一致</description>
    </item>
    
    <item>
      <title>Golang实现的一个扫描指定文件夹下所有中文所在行的小工具</title>
      <link>http://xlxing.github.io/post/golang%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E6%89%AB%E6%8F%8F%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E4%B8%AD%E6%96%87%E6%89%80%E5%9C%A8%E8%A1%8C%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 22 May 2018 20:02:00 +0800</pubDate>
      
      <guid>http://xlxing.github.io/post/golang%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E6%89%AB%E6%8F%8F%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E4%B8%AD%E6%96%87%E6%89%80%E5%9C%A8%E8%A1%8C%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</guid>
      <description>由于逻辑比较简单废话不多说直接上代码： package main import ( &amp;quot;bufio&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;unicode&amp;quot; ) var write *os.File func IsChineseChar(str string) bool { for _, r := range str { if unicode.Is(unicode.Scripts[&amp;quot;Han&amp;quot;], r) { return true } } return false } func scanAll(path string) { files, _ := ioutil.ReadDir(path) for _, fi := range</description>
    </item>
    
    <item>
      <title>Golang实现常用的排序算法</title>
      <link>http://xlxing.github.io/post/golang%E5%AE%9E%E7%8E%B0%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 22 May 2018 13:38:05 +0800</pubDate>
      
      <guid>http://xlxing.github.io/post/golang%E5%AE%9E%E7%8E%B0%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>以下排序算法的思想网上都可以搜到相对应的介绍，这里不再赘述，直接给出代码实现： package main import ( &amp;quot;fmt&amp;quot; ) // 冒泡排序 func bubbleSort(s []int) { for i := 0; i &amp;lt; len(s); i++ { for j := i + 1; j</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>http://xlxing.github.io/post/welcome/</link>
      <pubDate>Tue, 22 May 2018 13:31:45 +0800</pubDate>
      
      <guid>http://xlxing.github.io/post/welcome/</guid>
      <description>让我们一起徜徉在浩瀚的博客海洋中吧！！！</description>
    </item>
    
  </channel>
</rss>